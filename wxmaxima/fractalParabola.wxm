/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: comment start ]
Define fractal interpolation function
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fpprec:40$
fp(x,f,alpha,d1,d2):=(
    f1:f[1]*(1-d1),
    c1:f[2]-d1*f[3]-f1,
    f2:f[2]-d2*f[1],
    c2:(1-d2)*f[3]-f2,
    F1:(alpha*(f1+c1/2)+(1-alpha)*(f2+c2/2))/(1-(1-alpha)*d2-alpha*d1),
    FA:alpha*(f1+c1/2+d1*F1),
    l:bfloat(0.0),
    r:bfloat(1.0),
    its:floor(log(10^-prec)/log(max(alpha,1-alpha))),
    a:array(a,its),
    for i:1 thru its do (
        h:(r-l)*max(alpha,1-alpha),
        if (alpha>1/2) then 
            m:l+h
        else
            m:r-h,
        if (x<m) then block (
            a[i]:0,
            r:m
        ) else block (
            a[i]:1,
            l:m
        )
    ),
    x:bfloat(0.0),
    y:c1/(alpha-d1), yy:f[1], yyy:bfloat(0.0),
    for i:its thru 1 step -1 do (
        if (a[i]=0) then block (
            y:(c1+d1*y)/alpha,
            yy:c1*x+d1*yy+f1,
            yyy:alpha*(f1*x+c1/2*x*x+d1*yyy),
            x:alpha*x
        ) else block (
            y:(c2+d2*y)/(1-alpha),
            yy:c2*x+d2*yy+f2,
            yyy:FA+(1-alpha)*(f2*x+c2/2*x*x+d2*yyy),
            x:alpha+(1-alpha)*x
        )
    ),
    [y,yy,yyy]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec:40$
fpExactStarting0(x,f,alpha,d1,d2):=(
    f1:f[1]*(1-d1),
    c1:f[2]-d1*f[3]-f1,
    f2:f[2]-d2*f[1],
    c2:(1-d2)*f[3]-f2,
    F1:(alpha*(f1+c1/2)+(1-alpha)*(f2+c2/2))/(1-(1-alpha)*d2-alpha*d1),
    FA:alpha*(f1+c1/2+d1*F1),
    l:0,
    r:1,
    its:floor(log(10^-prec)/log(max(alpha,1-alpha))),
    a:array(a,its),
    for i:1 thru its do (
        h:(r-l)*max(alpha,1-alpha),
        if (alpha>1/2) then 
            m:l+h
        else
            m:r-h,
        if (x<m) then block (
            a[i]:0,
            r:m
        ) else block (
            a[i]:1,
            l:m
        )
    ),
    x:0,
    y:c1/(alpha-d1), yy:f[1], yyy:0,
    for i:its thru 1 step -1 do (
        if (a[i]=0) then block (
            y:(c1+d1*y)/alpha,
            yy:c1*x+d1*yy+f1,
            yyy:alpha*(f1*x+c1/2*x*x+d1*yyy),
            x:alpha*x
        ) else block (
            y:(c2+d2*y)/(1-alpha),
            yy:c2*x+d2*yy+f2,
            yyy:FA+(1-alpha)*(f2*x+c2/2*x*x+d2*yyy),
            x:alpha+(1-alpha)*x
        )
    ),
    [x,y,yy,yyy]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec:40$
fpExactStarting1(x,f,alpha,d1,d2):=(
    f1:f[1]*(1-d1),
    c1:f[2]-d1*f[3]-f1,
    f2:f[2]-d2*f[1],
    c2:(1-d2)*f[3]-f2,
    F1:(alpha*(f1+c1/2)+(1-alpha)*(f2+c2/2))/(1-(1-alpha)*d2-alpha*d1),
    FA:alpha*(f1+c1/2+d1*F1),
    l:0,
    r:1,
    its:floor(log(10^-prec)/log(max(alpha,1-alpha))),
    a:array(a,its),
    for i:1 thru its do (
        h:(r-l)*max(alpha,1-alpha),
        if (alpha>1/2) then 
            m:l+h
        else
            m:r-h,
        if (x<m) then block (
            a[i]:0,
            r:m
        ) else block (
            a[i]:1,
            l:m
        )
    ),
    x:1,
    y:c2/(1-alpha-d2), yy:f[3], yyy:F1,
    for i:its thru 1 step -1 do (
        if (a[i]=0) then block (
            y:(c1+d1*y)/alpha,
            yy:c1*x+d1*yy+f1,
            yyy:alpha*(f1*x+c1/2*x*x+d1*yyy),
            x:alpha*x
        ) else block (
            y:(c2+d2*y)/(1-alpha),
            yy:c2*x+d2*yy+f2,
            yyy:FA+(1-alpha)*(f2*x+c2/2*x*x+d2*yyy),
            x:alpha+(1-alpha)*x
        )
    ),
    [x,y,yy,yyy]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Load libraries
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(draw)$
load(descriptive)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Parameters for book, a root finding challenge
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
prec:30$
f:[123/1000,-123/1000,1/2]$
alpha:33/100$
d1:27/100$
d2:(alpha-d1)*(1-alpha)/alpha$
f1;
c1;
d1;
f2;
c2;
d2;
FA;
float(FA);
F1;
float(F1);
fpExactStarting0(0,f,alpha,d1,d2);
float(%);
fpExactStarting0(alpha,f,alpha,d1,d2);
float(%);
fpExactStarting1(1,f,alpha,d1,d2);
float(%);
fpExactStarting0(alpha^2,f,alpha,d1,d2);
float(%);
fpExactStarting0(alpha+(1-alpha)*alpha,f,alpha,d1,d2);
float(%);
fp(alpha+(1-alpha)*alpha,f,alpha,d1,d2);
fp(alpha^3,f,alpha,d1,d2);
fp(alpha*(alpha+(1-alpha)*alpha),f,alpha,d1,d2);
fp(alpha+(1-alpha)*alpha^2,f,alpha,d1,d2);
fp(alpha+(1-alpha)*(alpha+(1-alpha)*alpha),f,alpha,d1,d2);
c1/alpha+d1/alpha*fpExactStarting1(1,f,alpha,d1,d2)[2];
c2/(1-alpha)+d2/(1-alpha)*fpExactStarting0(0,f,alpha,d1,d2)[2];
fp(.61,f,float(alpha),d1,d2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Define parameters and create graphs of fractal interpolator,
its integral, and its derivative
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
prec:12$
pts:50$
f:[bfloat(.123),bfloat(-.123),bfloat(.5)]$
alpha:bfloat(.33)$
d1:bfloat(.27)$
d2:(alpha-d1)*(1-alpha)/alpha;
x:array(x,pts)$
for i:1 thru pts do (
    x[i]:bfloat((i-1)/(pts-1))
)$
master:makelist(fp(x[i],f,alpha,d1,d2),i,1,pts)$
y:makelist(master[i][1],i,1,pts)$
min1:smin(y)$
max1:smax(y)$
xy1:makelist([x[i],master[i][1]],i,1,pts)$
y:makelist(master[i][2],i,1,pts)$
min2:smin(y)$
max2:smax(y)$
xy2:makelist([x[i],master[i][2]],i,1,pts)$
y:makelist(master[i][3],i,1,pts)$
min3:smin(y)$
max3:smax(y)$
xy3:makelist([x[i],master[i][3]],i,1,pts)$
print("list created")$
draw2d(
    color=black,
    explicit(0,x,0,1),
    color=red,
    point_type=none,
    points_joined=true,
    point_size=0,
    points(xy1),
    xrange=[-.05,1.05],
    yrange=[min1-.05*(max1-min1),max1+.05*(max1-min1)],
    dimensions=[1000,618],
    file_name="calculus_derivatives1",
    terminal=pdf
);
draw2d(
    color=black,
    explicit(0,x,0,1),
    color=green,
    point_type=none,
    points_joined=true,
    point_size=0,
    points(xy2),
    xrange=[-.05,1.05],
    yrange=[min2-.05*(max2-min2),max2+.05*(max2-min2)],
    dimensions=[1000,618],
    file_name="calculus_derivatives2",
    terminal=pdf
);
draw2d(
    color=black,
    explicit(0,x,0,1),
    color=blue,
    point_type=none,
    points_joined=true,
    point_size=0,
    points(xy3),
    xrange=[-.05,1.05],
    yrange=[min3-.05*(max3-min3),max3+.05*(max3-min3)],
    dimensions=[1000,618],
    file_name="calculus_derivatives3",
    terminal=pdf
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Find root of derivative via bisection
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
prec:30$
tol:25$
x0:bfloat(0)$
y0:fp(x0,f,alpha,d1,d2)[1]$
x1:bfloat(1)$
cuts:ceiling(log(10^-tol)/log(1/2))$
for i:1 thru cuts do (
    m:x0+(x1-x0)/2,
    ym:fp(m,f,alpha,d1,d2)[1],
    if (y0*ym>0) then block(
        x0:m,
        y0:ym
    ) else block (
        x1:m
    )
)$
print(cuts," : m = ",m)$
print("f'(m) = ",fp(m,f,alpha,d1,d2)[1])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
print("f'(0.333590347996667) = ",fp(0.333590347996667,f,alpha,d1,d2)[1])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Find roots of function via secant method
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tol:16$
x0:bfloat(alpha)$
y0:fp(x0,f,alpha,d1,d2)[2]$
x1:bfloat(0)$
i:1$
while (i<100 and abs(x1-x0)>10^-tol) do (
    y1:fp(x1,f,alpha,d1,d2)[2],
    x2:x1-y1*(x1-x0)/(y1-y0),
    x0:x1,
    x1:x2,
    y0:y1,
    i:i+1
)$
print(i," : x2 = ",x2)$
print("f(x2) = ",fp(x2,f,alpha,d1,d2)[2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
x0:bfloat(alpha)$
y0:fp(x0,f,alpha,d1,d2)[2]$
x1:bfloat(1.0)$
i:1$
while (i<100 and abs(x1-x0)>1e-16) do (
    y1:fp(x1,f,alpha,d1,d2)[2],
    x2:x1-y1*(x1-x0)/(y1-y0),
    x0:x1,
    x1:x2,
    y0:y1,
    i:i+1
)$
print(i," : x2 = ",x2)$
print("f(x2) = ",fp(x2,f,alpha,d1,d2)[2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Find roots of integral via Newton's Method
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x0:bfloat(0.25)$
x1:x0-fp(x0,f,alpha,d1,d2)[3]/fp(x0,f,alpha,d1,d2)[2]$
i:1$
while (i<100 and abs(x1-x0)>1e-16) do (
    x0:x1,
    x1:x0-fp(x0,f,alpha,d1,d2)[3]/fp(x0,f,alpha,d1,d2)[2],
    i:i+1
)$
print(i," : x1 = ",x1)$
print("f(x1) = ",fp(x1,f,alpha,d1,d2)[3])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
x0:bfloat(0.75)$
x1:x0-fp(x0,f,alpha,d1,d2)[3]/fp(x0,f,alpha,d1,d2)[2]$
i:1$
while (i<100 and abs(x1-x0)>1e-16) do (
    x0:x1,
    x1:x0-fp(x0,f,alpha,d1,d2)[3]/fp(x0,f,alpha,d1,d2)[2],
    i:i+1
)$
print(i," : x1 = ",x1)$
print("f(x1) = ",fp(x1,f,alpha,d1,d2)[3])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Attempt to find root of derivative via secant method
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x0:bfloat(0.35)$
y0:fp(x0,f,alpha,d1,d2)[1]$
x1:bfloat(0.33002)$
i:1$
while (i<100 and abs(x1-x0)>1e-16) do (
    y1:fp(x1,f,alpha,d1,d2)[1],
    x2:x1-y1*(x1-x0)/(y1-y0),
print(x2),
    x0:x1,
    x1:x2,
    y0:y1,
    i:i+1
)$
print(i," x2 = ",x2)$
print(i,"  m = ",m)$
print("|x2-m| = ",abs(x2-m))$
print("f(x2) = ",fp(x2,f,alpha,d1,d2)[1])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
eq1:fp0=c1/alpha+d1/alpha*fp0;
eq2:fp1=c2/(1-alpha)+d2/(1-alpha)*fp1;
solve(eq1,fp0);
fp0:subst(%,fp0);
solve(eq2,fp1);
fp1:subst(%,fp1);
eq3:c1/alpha+d1/alpha*fp1=c2/(1-alpha)+d2/(1-alpha)*fp0;
solve(eq3,d2);
expand(%[2]*alpha);
%+d1-alpha*d1;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
